define(['require', 'module'], function (require, module) {
return (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { Template: peg$parseTemplate, BoundText: peg$parseBoundText },
        peg$startRuleFunction  = peg$parseTemplate,

        peg$c0 = peg$FAILED,
        peg$c1 = [],
        peg$c2 = null,
        peg$c3 = void 0,
        peg$c4 = { type: "any", description: "any character" },
        peg$c5 = function(widget) { return widget; },
        peg$c6 = function(body) {
        		if (!body) {
        			body = {
        				constructor: toAbsMid('../ui/Element'),
        				content: [],
        				children: []
        			};
        		}
        		return tree.get(body);
        	},
        peg$c7 = { type: "other", description: "HTML" },
        peg$c8 = function(nodes) {
        		var element = { constructor: toAbsMid('../ui/Element') };
        		var content = [];
        		var children = element.children = [];
        		var nonWhitespace = /\S/;

        		for (var i = 0, j = nodes.length; i < j; ++i) {
        			var node = nodes[i];

        			if (node instanceof Array) {
        				content.push.apply(content, node);
        			}
        			else if (node.$placeholder) {
        				content.push(node);
        			}
        			else {
        				content.push({ $child: children.length });
        				children.push(node);
        			}
        		}

        		// Parse the string portions of our html template for text bindings
        		var results = [];
        		var item;
        		var parsed;
        		for (var i = 0, j = content.length; i < j; ++i) {
        			item = content[i];

        			if (typeof item === 'string') {
        				parsed = parseBoundText(item);
        				// if an element contains only a single binding string and nothing else it will be provided as a
        				// scalar value, not an array
        				if (parsed.$bind && parsed.$bind instanceof Array) {
        					Array.prototype.push.apply(results, parsed.$bind);
        				}
        				else {
        					results.push(parsed);
        				}
        			}
        			else {
        				if (item.$bind !== undefined && item.$bind instanceof Array) {
        					for (var k = 0, l = item.$bind.length; k < l; ++k) {
        						var bindItem = item.$bind[k];
        						if (bindItem.$bind !== undefined) {
        							item.$bind[k] = { path: bindItem.$bind };
        						}
        					}
        				}
        				results.push(item);
        			}
        		}

        		element.content = results;
        		return element;
        	},
        peg$c9 = { type: "other", description: "HTML comment" },
        peg$c10 = "<!--",
        peg$c11 = { type: "literal", value: "<!--", description: "\"<!--\"" },
        peg$c12 = /^[^\-]/,
        peg$c13 = { type: "class", value: "[^\\-]", description: "[^\\-]" },
        peg$c14 = "-",
        peg$c15 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c16 = function(dashed) {
        				return dashed.join('');
        			},
        peg$c17 = "-->",
        peg$c18 = { type: "literal", value: "-->", description: "\"-->\"" },
        peg$c19 = function(content) {
        		return '<!--' + content.join('') + '-->';
        	},
        peg$c20 = function(comment) { return [ comment ]; },
        peg$c21 = function(content) {
        			return [].concat(content);
        		},
        peg$c22 = function(content) {
        		content = concat.apply([], content);
        		var flattenedFragment = [];
        		var lastIndex = -1;
        		for (var i = 0, j = content.length; i < j; ++i) {
        			if (typeof flattenedFragment[lastIndex] === 'string' && typeof content[i] === 'string') {
        				flattenedFragment[lastIndex] += content[i];
        			}
        			else {
        				flattenedFragment.push(content[i]);
        				++lastIndex;
        			}
        		}

        		return flattenedFragment;
        	},
        peg$c23 = "<",
        peg$c24 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c25 = /^[a-zA-Z]/,
        peg$c26 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c27 = /^[a-zA-Z0-9\-]/,
        peg$c28 = { type: "class", value: "[a-zA-Z0-9\\-]", description: "[a-zA-Z0-9\\-]" },
        peg$c29 = function(firstChar, restChars) {
        		// convert to lower-case for case-insensitive comparison
        		return (firstChar + restChars.join('')).toLowerCase();
        	},
        peg$c30 = "/",
        peg$c31 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c32 = ">",
        peg$c33 = { type: "literal", value: ">", description: "\">\"" },
        peg$c34 = function(content) {
        		return concat.apply([], content);
        	},
        peg$c35 = "=",
        peg$c36 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c37 = function(key, value, ws) {
        		return [ key + '"', value, '"' + ws ];
        	},
        peg$c38 = function(attributes) {
        		return concat.apply([], attributes);
        	},
        peg$c39 = "{",
        peg$c40 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c41 = "\\{",
        peg$c42 = { type: "literal", value: "\\{", description: "\"\\\\{\"" },
        peg$c43 = function() { return '\x7b'; },
        peg$c44 = /^[^{]/,
        peg$c45 = { type: "class", value: "[^{]", description: "[^{]" },
        peg$c46 = function(char) { return char; },
        peg$c47 = function(value) {
        			return value.join('');
        		},
        peg$c48 = function(value) {
        		var binding = {};

        		if (value.charAt(1) === '{' && value.charAt(value.length - 2) === '}') {
        			binding.$bind = value.slice(2, -2);
        			binding.direction = 2;
        		}
        		else {
        			binding.$bind = value.slice(1, -1);
        			binding.direction = 1;
        		}

        		return binding;
        	},
        peg$c49 = "}",
        peg$c50 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c51 = function(value) { return value.join(''); },
        peg$c52 = "\\}",
        peg$c53 = { type: "literal", value: "\\}", description: "\"\\\\}\"" },
        peg$c54 = function() { return '\x7d'; },
        peg$c55 = /^[^{}]/,
        peg$c56 = { type: "class", value: "[^{}]", description: "[^{}]" },
        peg$c57 = { type: "other", description: "<if></if>" },
        peg$c58 = function(kwArgs, consequent) {
        			kwArgs.consequent = consequent;
        			return kwArgs;
        		},
        peg$c59 = function(kwArgs, consequent) {
        		kwArgs.condition = true;
        		kwArgs.consequent = consequent;
        		return kwArgs;
        	},
        peg$c60 = function(kwArgs, consequent, alternates, finalAlternate) {
        		kwArgs.consequent = consequent;

        		var widget = { constructor: toAbsMid('../ui/Conditional') };
        		widget.conditions = alternates ? alternates : [];
        		widget.conditions.unshift(kwArgs);
        		finalAlternate && widget.conditions.push(finalAlternate);
        		return widget;
        	},
        peg$c61 = { type: "other", description: "<if>" },
        peg$c62 = "<if",
        peg$c63 = { type: "literal", value: "<if", description: "\"<if\"" },
        peg$c64 = function(kwArgs) {
        		validate(kwArgs, {
        			type: '<if>',
        			required: [ 'condition' ]
        		});
        		return kwArgs;
        	},
        peg$c65 = { type: "other", description: "</if>" },
        peg$c66 = "</if",
        peg$c67 = { type: "literal", value: "</if", description: "\"</if\"" },
        peg$c68 = { type: "other", description: "<elseif>" },
        peg$c69 = "<elseif",
        peg$c70 = { type: "literal", value: "<elseif", description: "\"<elseif\"" },
        peg$c71 = function(kwArgs) {
        		validate(kwArgs, {
        			type: '<elseif>',
        			required: [ 'condition' ]
        		});
        		return kwArgs;
        	},
        peg$c72 = { type: "other", description: "<else>" },
        peg$c73 = "<else",
        peg$c74 = { type: "literal", value: "<else", description: "\"<else\"" },
        peg$c75 = function(kwArgs) {
        		validate(kwArgs, {
        			type: '<else>'
        		});
        		return kwArgs;
        	},
        peg$c76 = { type: "other", description: "<for></for>" },
        peg$c77 = function(tagArgs, template) {
        		var kwArgs = {
        			constructor: toAbsMid('../ui/Iterator'),
        			collection: tagArgs.each,
        			// $ctor is a special flag to the template processor to pass the generated constructor function for the
        			// widget instead of generating an instance of the widget
        			itemConstructor: { $ctor: template }
        		};

        		if (tagArgs.as) {
        			kwArgs.as = tagArgs.as;
        		}

        		return kwArgs;
        	},
        peg$c78 = { type: "other", description: "<for>" },
        peg$c79 = "<for",
        peg$c80 = { type: "literal", value: "<for", description: "\"<for\"" },
        peg$c81 = function(kwArgs) {
        		validate(kwArgs, {
        			type: '<for>',
        			required: [ 'each' ],
        			optional: [ 'as' ]
        		});
        		return kwArgs;
        	},
        peg$c82 = { type: "other", description: "</for>" },
        peg$c83 = "</for",
        peg$c84 = { type: "literal", value: "</for", description: "\"</for\"" },
        peg$c85 = { type: "other", description: "<when></when>" },
        peg$c86 = function(kwArgs, fulfilled, optional) {
        		if (!fulfilled) {
        			throwError('<when> requires content as its first child');
        		}
        		kwArgs.constructor = toAbsMid('../ui/Promise');
        		kwArgs.fulfilled = fulfilled;
        		if (optional) {
        			if (optional.rejected) {
        				if (optional.rejected.as) {
        					kwArgs.rejectedAs = optional.rejected.as;
        				}
        				kwArgs.rejected = optional.rejected.body;
        			}
        			if (optional.pending) {
        				if (optional.pending.as) {
        					kwArgs.pendingAs = optional.pending.as;
        				}
        				kwArgs.pending = optional.pending.body;
        			}
        		}
        		kwArgs.value = kwArgs.value;
        		return kwArgs;
        	},
        peg$c87 = { type: "other", description: "<when>" },
        peg$c88 = "<when",
        peg$c89 = { type: "literal", value: "<when", description: "\"<when\"" },
        peg$c90 = function(kwArgs) {
        		validate(kwArgs, {
        			type: '<when>',
        			required: [ 'value' ],
        			optional: [ 'as' ]
        		});
        		return kwArgs;
        	},
        peg$c91 = { type: "other", description: "</when>" },
        peg$c92 = "</when",
        peg$c93 = { type: "literal", value: "</when", description: "\"</when\"" },
        peg$c94 = { type: "other", description: "<pending>" },
        peg$c95 = "<pending",
        peg$c96 = { type: "literal", value: "<pending", description: "\"<pending\"" },
        peg$c97 = function(kwArgs, body) {
        		validate(kwArgs, {
        			type: '<pending>',
        			optional: [ 'as' ]
        		});
        		kwArgs.body = body;
        		return kwArgs;
        	},
        peg$c98 = { type: "other", description: "<rejected>" },
        peg$c99 = "<rejected",
        peg$c100 = { type: "literal", value: "<rejected", description: "\"<rejected\"" },
        peg$c101 = function(kwArgs, body) {
        		validate(kwArgs, {
        			type: '<rejected>',
        			optional: [ 'as' ]
        		});
        		kwArgs.body = body;
        		return kwArgs;
        	},
        peg$c102 = function(rejected, pending) {
        		var kwArgs = {
        			rejected: rejected
        		};
        		if (pending) {
        			kwArgs.pending = pending;
        		}
        		return kwArgs;
        	},
        peg$c103 = function(pending, rejected) {
        		var kwArgs = {
        			pending: pending
        		};
        		if (rejected) {
        			kwArgs.rejected = rejected;
        		}
        		return kwArgs;
        	},
        peg$c104 = { type: "other", description: "<widget></widget>" },
        peg$c105 = "/>",
        peg$c106 = { type: "literal", value: "/>", description: "\"/>\"" },
        peg$c107 = function() { return []; },
        peg$c108 = function(children) { return children; },
        peg$c109 = function(kwArgs, children) {
        		var widget = {};

        		for (var key in kwArgs) {
        			if (key === 'is') {
        				widget.constructor = kwArgs[key];
        			}
        			else {
        				widget[key] = kwArgs[key];
        			}
        		}

        		if (typeof widget.constructor !== 'string') {
        			throwError('Widget constructor must be a string');
        		}

        		children = children.filter(function (value) {
        			if (value && 'key' in value && 'value' in value) {
        				widget[value.key] = value.value;
        				return false;
        			}

        			return true;
        		});

        		if (children.length) {
        			widget.children = children;
        		}

        		return widget;
        	},
        peg$c110 = { type: "other", description: "<widget>" },
        peg$c111 = "<widget",
        peg$c112 = { type: "literal", value: "<widget", description: "\"<widget\"" },
        peg$c113 = function(kwArgs) {
        		validate(kwArgs, {
        			type: '<widget>',
        			required: [ 'is' ],
        			extensible: true
        		});

        		return kwArgs;
        	},
        peg$c114 = { type: "other", description: "</widget>" },
        peg$c115 = "</widget",
        peg$c116 = { type: "literal", value: "</widget", description: "\"</widget\"" },
        peg$c117 = { type: "other", description: "<tag></tag>" },
        peg$c118 = function(kwArgs) {
        			return { kwArgs: kwArgs, children: [] };
        		},
        peg$c119 = function(kwArgs, children, end) { return end === kwArgs.tagName; },
        peg$c120 = function(kwArgs, children, end) {
        			return { kwArgs: kwArgs, children: children };
        		},
        peg$c121 = function(value) {
        		var children = value.children;
        		var kwArgs = value.kwArgs;

        		var widget = {
        			constructor: tree.tagMap[kwArgs.tagName].to
        		};

        		for (var key in kwArgs) {
        			if (key === 'tagName' || key === 'constructor') {
        				continue;
        			}
        			widget[key] = kwArgs[key];
        		}

        		children = children.filter(function (value) {
        			if (value && 'key' in value && 'value' in value) {
        				widget[value.key] = value.value;
        				return false;
        			}

        			return true;
        		});

        		if (children.length) {
        			widget.children = children;
        		}

        		return widget;
        	},
        peg$c122 = { type: "other", description: "<tag>" },
        peg$c123 = function(tagName) { return hasOwnProperty.call(tree.tagMap, tagName); },
        peg$c124 = function(tagName, kwArgs) {
        		kwArgs.tagName = tagName;
        		return kwArgs;
        	},
        peg$c125 = { type: "other", description: "</tag>" },
        peg$c126 = "</",
        peg$c127 = { type: "literal", value: "</", description: "\"</\"" },
        peg$c128 = function(tagName) {
        		return tagName;
        	},
        peg$c129 = { type: "other", description: "<property></property>" },
        peg$c130 = function() { return null; },
        peg$c131 = function(kwArgs, widget) {
        		var value = kwArgs.constructor === true ? { $ctor: widget } : widget;

        		return { key: kwArgs.name, value: value };
        	},
        peg$c132 = { type: "other", description: "<property>" },
        peg$c133 = "<property",
        peg$c134 = { type: "literal", value: "<property", description: "\"<property\"" },
        peg$c135 = function(kwArgs) {
        		validate(kwArgs, {
        			type: '<property>',
        			required: [ 'name' ],
        			optional: [ 'constructor' ]
        		});

        		return kwArgs;
        	},
        peg$c136 = { type: "other", description: "</property>" },
        peg$c137 = "</property",
        peg$c138 = { type: "literal", value: "</property", description: "\"</property\"" },
        peg$c139 = { type: "other", description: "<placeholder>" },
        peg$c140 = "<placeholder",
        peg$c141 = { type: "literal", value: "<placeholder", description: "\"<placeholder\"" },
        peg$c142 = function(kwArgs) {
        		return { $placeholder: kwArgs.name || 'default' };
        	},
        peg$c143 = { type: "other", description: "<alias>" },
        peg$c144 = "<alias",
        peg$c145 = { type: "literal", value: "<alias", description: "\"<alias\"" },
        peg$c146 = function(alias) {
        		validate(alias, {
        			type: '<alias>',
        			oneOf: [ 'tag', 'event' ],
        			required: [ 'to' ]
        		});
        		alias.line = line();
        		alias.column = column();

        		if (alias.tag) {
        			tree.addTag(alias);
        		}
        		else if (alias.event) {
        			tree.addEvent(alias);
        		}
        		return undefined;
        	},
        peg$c147 = function() {
        		// InvalidAlias is strictly to generate an error after aliases at the top
        		// of the template have been processed and the body of a template has begun
        		// processing. Therefore, nothing is captured and nothing is returned.
        		throwError('Aliases can only be defined at the beginning of the template');
        	},
        peg$c148 = function(attributes) {
        		var attributeMap = {};
        		for (var i = 0, attribute; (attribute = attributes[i]); ++i) {
        			if (hasOwnProperty.call(attributeMap, attribute.name)) {
        				throwError('Duplicate attribute "' + attribute.name + '"');
        			}

        			attributeMap[attribute.name] = attribute.value;
        		}
        		return attributeMap;
        	},
        peg$c149 = function(value) { return value; },
        peg$c150 = function() { return true; },
        peg$c151 = function(name, value) {
        		return { name: name, value: value };
        	},
        peg$c152 = function(nameChars) {
        		return nameChars.join('').replace(/-(.)/g, function () {
        			return arguments[1].toUpperCase();
        		});
        	},
        peg$c153 = "'",
        peg$c154 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c155 = "\\'",
        peg$c156 = { type: "literal", value: "\\'", description: "\"\\\\'\"" },
        peg$c157 = function() { return "'"; },
        peg$c158 = /^[^'\r\n]/,
        peg$c159 = { type: "class", value: "[^'\\r\\n]", description: "[^'\\r\\n]" },
        peg$c160 = function(value) { return parseBoundText(value.join('')); },
        peg$c161 = "\"",
        peg$c162 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c163 = "\\\"",
        peg$c164 = { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
        peg$c165 = function() { return '"'; },
        peg$c166 = /^[^"\r\n]/,
        peg$c167 = { type: "class", value: "[^\"\\r\\n]", description: "[^\"\\r\\n]" },
        peg$c168 = function() { return {}; },
        peg$c169 = function(members) { return members; },
        peg$c170 = ",",
        peg$c171 = { type: "literal", value: ",", description: "\",\"" },
        peg$c172 = function(head, tail) {
        		var result = {};
        		result[head[0]] = head[1];
        		for (var i = 0; i < tail.length; i++) {
        			result[tail[i][2][0]] = tail[i][2][1];
        		}
        		return result;
        	},
        peg$c173 = ":",
        peg$c174 = { type: "literal", value: ":", description: "\":\"" },
        peg$c175 = function(name, value) { return [ name, value ]; },
        peg$c176 = "[",
        peg$c177 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c178 = "]",
        peg$c179 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c180 = function() { return [] },
        peg$c181 = function(elements) { return elements; },
        peg$c182 = function(head, tail) {
        		var result = [ head ];
        		for (var i = 0, j = tail.length; i < j; ++i) {
        			result.push(tail[i][2]);
        		}
        		return result;
        	},
        peg$c183 = { type: "other", description: "true" },
        peg$c184 = "true",
        peg$c185 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c186 = { type: "other", description: "false" },
        peg$c187 = "false",
        peg$c188 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c189 = function() { return false; },
        peg$c190 = { type: "other", description: "null" },
        peg$c191 = "null",
        peg$c192 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c193 = { type: "other", description: "string" },
        peg$c194 = function() { return ""; },
        peg$c195 = function(chars) { return chars; },
        peg$c196 = function(chars) { return chars.join(''); },
        peg$c197 = /^[^"\\\0-\x1F]/,
        peg$c198 = { type: "class", value: "[^\"\\\\\\0-\\x1F]", description: "[^\"\\\\\\0-\\x1F]" },
        peg$c199 = "\\\\",
        peg$c200 = { type: "literal", value: "\\\\", description: "\"\\\\\\\\\"" },
        peg$c201 = function() { return '\\'; },
        peg$c202 = "\\/",
        peg$c203 = { type: "literal", value: "\\/", description: "\"\\\\/\"" },
        peg$c204 = function() { return '/';  },
        peg$c205 = "\\b",
        peg$c206 = { type: "literal", value: "\\b", description: "\"\\\\b\"" },
        peg$c207 = function() { return '\b'; },
        peg$c208 = "\\f",
        peg$c209 = { type: "literal", value: "\\f", description: "\"\\\\f\"" },
        peg$c210 = function() { return '\f'; },
        peg$c211 = "\\n",
        peg$c212 = { type: "literal", value: "\\n", description: "\"\\\\n\"" },
        peg$c213 = function() { return '\n'; },
        peg$c214 = "\\r",
        peg$c215 = { type: "literal", value: "\\r", description: "\"\\\\r\"" },
        peg$c216 = function() { return '\r'; },
        peg$c217 = "\\t",
        peg$c218 = { type: "literal", value: "\\t", description: "\"\\\\t\"" },
        peg$c219 = function() { return '\t'; },
        peg$c220 = "\\u",
        peg$c221 = { type: "literal", value: "\\u", description: "\"\\\\u\"" },
        peg$c222 = function(digits) { return String.fromCharCode(parseInt(digits, 16)); },
        peg$c223 = { type: "other", description: "number" },
        peg$c224 = function(parts) { return parseFloat(parts); },
        peg$c225 = ".",
        peg$c226 = { type: "literal", value: ".", description: "\".\"" },
        peg$c227 = /^[0-9]/,
        peg$c228 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c229 = /^[1-9]/,
        peg$c230 = { type: "class", value: "[1-9]", description: "[1-9]" },
        peg$c231 = /^[0-9a-fA-F]/,
        peg$c232 = { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
        peg$c233 = /^[eE]/,
        peg$c234 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c235 = /^[+\-]/,
        peg$c236 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
        peg$c237 = { type: "other", description: "whitespace" },
        peg$c238 = /^[ \t\r\n]/,
        peg$c239 = { type: "class", value: "[ \\t\\r\\n]", description: "[ \\t\\r\\n]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseTemplate() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseAlias();
      if (s2 === peg$FAILED) {
        s2 = peg$parseS();
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseAlias();
        if (s2 === peg$FAILED) {
          s2 = peg$parseS();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseAnyNonElement();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseS();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            peg$silentFails--;
            if (s6 === peg$FAILED) {
              s5 = peg$c3;
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c5(s3);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parseElement();
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c6(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseElement() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseAnyNonElement();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePlaceholder();
        if (s2 === peg$FAILED) {
          s2 = peg$parseHtmlFragment();
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseAnyNonElement();
          if (s2 === peg$FAILED) {
            s2 = peg$parsePlaceholder();
            if (s2 === peg$FAILED) {
              s2 = peg$parseHtmlFragment();
            }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c8(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }

      return s0;
    }

    function peg$parseHtmlComment() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c10) {
        s1 = peg$c10;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c12.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c14;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s5 !== peg$FAILED) {
            if (peg$c12.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c13); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c16(s4);
          }
          s3 = s4;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c12.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c13); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c14;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s5 !== peg$FAILED) {
              if (peg$c12.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c13); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c16(s4);
            }
            s3 = s4;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c17) {
            s3 = peg$c17;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c19(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      return s0;
    }

    function peg$parseHtmlFragment() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseHtmlComment();
      if (s3 !== peg$FAILED) {
        peg$reportedPos = s2;
        s3 = peg$c20(s3);
      }
      s2 = s3;
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseNonHtmlTags();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = peg$c3;
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseHtmlTag();
          if (s4 === peg$FAILED) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c21(s4);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parseHtmlComment();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c20(s3);
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parseNonHtmlTags();
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = peg$c3;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseHtmlTag();
              if (s4 === peg$FAILED) {
                if (input.length > peg$currPos) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c4); }
                }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s2;
                s3 = peg$c21(s4);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c22(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }

      return s0;
    }

    function peg$parseNonHtmlTags() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 60) {
        s2 = peg$c23;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      peg$silentFails--;
      if (s2 !== peg$FAILED) {
        peg$currPos = s1;
        s1 = peg$c3;
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIfTagOpen();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseElseIfTag();
        if (s0 === peg$FAILED) {
          s0 = peg$parseElseTag();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIfTagClose();
            if (s0 === peg$FAILED) {
              s0 = peg$parseForTagOpen();
              if (s0 === peg$FAILED) {
                s0 = peg$parseForTagClose();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseWhenTagOpen();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseRejectedTag();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsePendingTag();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseWhenTagClose();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsePlaceholder();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseInvalidAlias();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseWidgetTagOpen();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseWidgetTagClose();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseAliasedWidgetTagOpen();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseAliasedWidgetTagClose();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsePropertyTagOpen();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsePropertyTagClose();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseTagName() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (peg$c25.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c27.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c27.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c29(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHtmlTag() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s4 = peg$c23;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseTagName();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$parseS();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseS();
            }
          } else {
            s6 = peg$c0;
          }
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$c0;
      }
      if (s3 !== peg$FAILED) {
        s3 = input.substring(s2, peg$currPos);
      }
      s2 = s3;
      if (s2 !== peg$FAILED) {
        s3 = peg$parseHtmlAttributes();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s6 = peg$c30;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s6 === peg$FAILED) {
            s6 = peg$c2;
          }
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s7 = peg$c32;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$c0;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$c0;
          }
          if (s5 !== peg$FAILED) {
            s5 = input.substring(s4, peg$currPos);
          }
          s4 = s5;
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c34(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseHtmlAttributes() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$currPos;
      s5 = peg$parseAttributeNameChars();
      if (s5 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s6 = peg$c35;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s6 !== peg$FAILED) {
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$c0;
      }
      if (s4 !== peg$FAILED) {
        s4 = input.substring(s3, peg$currPos);
      }
      s3 = s4;
      if (s3 !== peg$FAILED) {
        s4 = peg$parseAttributeStringValue();
        if (s4 === peg$FAILED) {
          s4 = peg$parseBinding();
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          s6 = [];
          s7 = peg$parseS();
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseS();
          }
          if (s6 !== peg$FAILED) {
            s6 = input.substring(s5, peg$currPos);
          }
          s5 = s6;
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c37(s3, s4, s5);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$currPos;
        s5 = peg$parseAttributeNameChars();
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s6 = peg$c35;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$c0;
        }
        if (s4 !== peg$FAILED) {
          s4 = input.substring(s3, peg$currPos);
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          s4 = peg$parseAttributeStringValue();
          if (s4 === peg$FAILED) {
            s4 = peg$parseBinding();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = [];
            s7 = peg$parseS();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseS();
            }
            if (s6 !== peg$FAILED) {
              s6 = input.substring(s5, peg$currPos);
            }
            s5 = s6;
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s2;
              s3 = peg$c37(s3, s4, s5);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c38(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBoundText() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = [];
      s1 = peg$parseHtmlComment();
      if (s1 === peg$FAILED) {
        s1 = peg$parseBinding();
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c39;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c40); }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c41) {
              s5 = peg$c41;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c42); }
            }
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s4;
              s5 = peg$c43();
            }
            s4 = s5;
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              s5 = peg$currPos;
              peg$silentFails++;
              if (input.substr(peg$currPos, 4) === peg$c10) {
                s6 = peg$c10;
                peg$currPos += 4;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c11); }
              }
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = peg$c3;
              } else {
                peg$currPos = s5;
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                if (peg$c44.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c45); }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c46(s6);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c41) {
                  s5 = peg$c41;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c42); }
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s4;
                  s5 = peg$c43();
                }
                s4 = s5;
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$currPos;
                  peg$silentFails++;
                  if (input.substr(peg$currPos, 4) === peg$c10) {
                    s6 = peg$c10;
                    peg$currPos += 4;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c11); }
                  }
                  peg$silentFails--;
                  if (s6 === peg$FAILED) {
                    s5 = peg$c3;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$c0;
                  }
                  if (s5 !== peg$FAILED) {
                    if (peg$c44.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c45); }
                    }
                    if (s6 !== peg$FAILED) {
                      peg$reportedPos = s4;
                      s5 = peg$c46(s6);
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                }
              }
            } else {
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s1;
              s2 = peg$c47(s3);
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseHtmlComment();
        if (s1 === peg$FAILED) {
          s1 = peg$parseBinding();
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 123) {
              s3 = peg$c39;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c40); }
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = peg$c3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              s4 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c41) {
                s5 = peg$c41;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c42); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c43();
              }
              s4 = s5;
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 4) === peg$c10) {
                  s6 = peg$c10;
                  peg$currPos += 4;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c11); }
                }
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                  s5 = peg$c3;
                } else {
                  peg$currPos = s5;
                  s5 = peg$c0;
                }
                if (s5 !== peg$FAILED) {
                  if (peg$c44.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c45); }
                  }
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c46(s6);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$c0;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              }
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c41) {
                    s5 = peg$c41;
                    peg$currPos += 2;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c42); }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$reportedPos = s4;
                    s5 = peg$c43();
                  }
                  s4 = s5;
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 4) === peg$c10) {
                      s6 = peg$c10;
                      peg$currPos += 4;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c11); }
                    }
                    peg$silentFails--;
                    if (s6 === peg$FAILED) {
                      s5 = peg$c3;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$c0;
                    }
                    if (s5 !== peg$FAILED) {
                      if (peg$c44.test(input.charAt(peg$currPos))) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c45); }
                      }
                      if (s6 !== peg$FAILED) {
                        peg$reportedPos = s4;
                        s5 = peg$c46(s6);
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$c0;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$c0;
                    }
                  }
                }
              } else {
                s3 = peg$c0;
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s1;
                s2 = peg$c47(s3);
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseBinding() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseBalancedBraces();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c48(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBalancedBraces() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s2 = peg$c39;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBindingData();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s4 = peg$c49;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c51(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseBindingData() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c41) {
        s3 = peg$c41;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      if (s3 !== peg$FAILED) {
        peg$reportedPos = s2;
        s3 = peg$c43();
      }
      s2 = s3;
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c52) {
          s3 = peg$c52;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c53); }
        }
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c54();
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$parseBalancedBraces();
          if (s2 === peg$FAILED) {
            if (peg$c55.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c56); }
            }
          }
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c41) {
          s3 = peg$c41;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c43();
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c52) {
            s3 = peg$c52;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c53); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s2;
            s3 = peg$c54();
          }
          s2 = s3;
          if (s2 === peg$FAILED) {
            s2 = peg$parseBalancedBraces();
            if (s2 === peg$FAILED) {
              if (peg$c55.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c56); }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c51(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseIf() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseIfTagOpen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAny();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseElseIfTag();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseAny();
            if (s6 === peg$FAILED) {
              s6 = peg$c2;
            }
            if (s6 !== peg$FAILED) {
              peg$reportedPos = s4;
              s5 = peg$c58(s5, s6);
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseElseIfTag();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseAny();
              if (s6 === peg$FAILED) {
                s6 = peg$c2;
              }
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c58(s5, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parseElseTag();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseAny();
              if (s6 === peg$FAILED) {
                s6 = peg$c2;
              }
              if (s6 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c59(s5, s6);
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseIfTagClose();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c60(s1, s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }

      return s0;
    }

    function peg$parseIfTagOpen() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c62) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c32;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c64(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }

      return s0;
    }

    function peg$parseIfTagClose() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c66) {
        s1 = peg$c66;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c67); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c32) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }

      return s0;
    }

    function peg$parseElseIfTag() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c69) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c32;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c71(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }

      return s0;
    }

    function peg$parseElseTag() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c73) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c74); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c32;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c75(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }

      return s0;
    }

    function peg$parseFor() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseForTagOpen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAny();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseForTagClose();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c77(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c76); }
      }

      return s0;
    }

    function peg$parseForTagOpen() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c79) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c80); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c32;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c81(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }

      return s0;
    }

    function peg$parseForTagClose() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c83) {
        s1 = peg$c83;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c32) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c82); }
      }

      return s0;
    }

    function peg$parseWhen() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseWhenTagOpen();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAny();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRejectedPendingTags();
          if (s3 === peg$FAILED) {
            s3 = peg$parsePendingRejectedTags();
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseWhenTagClose();
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c86(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }

      return s0;
    }

    function peg$parseWhenTagOpen() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c88) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c32;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c90(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }

      return s0;
    }

    function peg$parseWhenTagClose() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c92) {
        s1 = peg$c92;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c93); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c32) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }

      return s0;
    }

    function peg$parsePendingTag() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c95) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c32;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseAny();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c97(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }

      return s0;
    }

    function peg$parseRejectedTag() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c99) {
        s1 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c32;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseAny();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c101(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }

      return s0;
    }

    function peg$parseRejectedPendingTags() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseRejectedTag();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsePendingTag();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c102(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsePendingRejectedTags() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsePendingTag();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseRejectedTag();
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c103(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseWidget() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseWidgetTagOpen();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c105) {
            s4 = peg$c105;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c106); }
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c107();
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 62) {
              s4 = peg$c32;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseAny();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseAny();
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseS();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseS();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseWidgetTagClose();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = s3;
                    s4 = peg$c108(s5);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c109(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c104); }
      }

      return s0;
    }

    function peg$parseWidgetTagOpen() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c111) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c112); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c30;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$c2;
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s6 = peg$c32;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          peg$silentFails--;
          if (s4 !== peg$FAILED) {
            peg$currPos = s3;
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c113(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }

      return s0;
    }

    function peg$parseWidgetTagClose() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c115) {
        s1 = peg$c115;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c32) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }

      return s0;
    }

    function peg$parseAliasedWidget() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseAliasedWidgetTagOpen();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c105) {
          s3 = peg$c105;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s1;
          s2 = peg$c118(s2);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseAliasedWidgetTagOpen();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c32;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseS();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseS();
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseAny();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseAny();
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parseS();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parseS();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseAliasedWidgetTagClose();
                  if (s7 !== peg$FAILED) {
                    peg$reportedPos = peg$currPos;
                    s8 = peg$c119(s2, s5, s7);
                    if (s8) {
                      s8 = peg$c3;
                    } else {
                      s8 = peg$c0;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$reportedPos = s1;
                      s2 = peg$c120(s2, s5, s7);
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$c0;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c121(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c117); }
      }

      return s0;
    }

    function peg$parseAliasedWidgetTagOpen() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTagName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s3 = peg$c123(s2);
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseAttributeMap();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 47) {
                s7 = peg$c30;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s7 === peg$FAILED) {
                s7 = peg$c2;
              }
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 62) {
                  s8 = peg$c32;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c33); }
                }
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$c0;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$c0;
              }
              peg$silentFails--;
              if (s6 !== peg$FAILED) {
                peg$currPos = s5;
                s5 = peg$c3;
              } else {
                s5 = peg$c0;
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c124(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }

      return s0;
    }

    function peg$parseAliasedWidgetTagClose() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c126) {
        s1 = peg$c126;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c127); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTagName();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = peg$currPos;
          s3 = peg$c123(s2);
          if (s3) {
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parseS();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseS();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s5 = peg$c32;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c128(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c125); }
      }

      return s0;
    }

    function peg$parseProperty() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsePropertyTagOpen();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c105) {
          s3 = peg$c105;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s3 !== peg$FAILED) {
          peg$reportedPos = s2;
          s3 = peg$c130();
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c32;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseAny();
            if (s4 === peg$FAILED) {
              s4 = peg$c2;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsePropertyTagClose();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s2;
                s3 = peg$c5(s4);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c131(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }

      return s0;
    }

    function peg$parsePropertyTagOpen() {
      var s0, s1, s2, s3, s4, s5, s6;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c133) {
        s1 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c134); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c30;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s5 === peg$FAILED) {
            s5 = peg$c2;
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s6 = peg$c32;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          peg$silentFails--;
          if (s4 !== peg$FAILED) {
            peg$currPos = s3;
            s3 = peg$c3;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c135(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c132); }
      }

      return s0;
    }

    function peg$parsePropertyTagClose() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c137) {
        s1 = peg$c137;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 1).toLowerCase() === peg$c32) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c136); }
      }

      return s0;
    }

    function peg$parsePlaceholder() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c140) {
        s1 = input.substr(peg$currPos, 12);
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c141); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c30;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s4 = peg$c32;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c142(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c139); }
      }

      return s0;
    }

    function peg$parseAlias() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c144) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c30;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s4 = peg$c32;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c146(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }

      return s0;
    }

    function peg$parseInvalidAlias() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c144) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c145); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeMap();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c30;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c2;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s4 = peg$c32;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c33); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c147();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c143); }
      }

      return s0;
    }

    function peg$parseAttributeMap() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseAttribute();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseAttribute();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c148(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAttribute() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseS();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseS();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAttributeName();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseS();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseS();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s5 = peg$c35;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseS();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseS();
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseAttributeValue();
                if (s7 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c149(s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = [];
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c150();
            }
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c151(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAttributeName() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseAttributeNameChars();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c152(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseAttributeNameChars() {
      var s0, s1;

      s0 = [];
      if (peg$c27.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c27.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAttributeValue() {
      var s0;

      s0 = peg$parseAttributeStringValue();
      if (s0 === peg$FAILED) {
        s0 = peg$parseJsonValue();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBinding();
        }
      }

      return s0;
    }

    function peg$parseAttributeStringValue() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c153;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c154); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c155) {
          s4 = peg$c155;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c156); }
        }
        if (s4 !== peg$FAILED) {
          peg$reportedPos = s3;
          s4 = peg$c157();
        }
        s3 = s4;
        if (s3 === peg$FAILED) {
          if (peg$c158.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c159); }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c155) {
            s4 = peg$c155;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c156); }
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c157();
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            if (peg$c158.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c159); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c153;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c154); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c160(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c161;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c162); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c163) {
            s4 = peg$c163;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c164); }
          }
          if (s4 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c165();
          }
          s3 = s4;
          if (s3 === peg$FAILED) {
            if (peg$c166.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c167); }
            }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c163) {
              s4 = peg$c163;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c164); }
            }
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c165();
            }
            s3 = s4;
            if (s3 === peg$FAILED) {
              if (peg$c166.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c167); }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c161;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c162); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c160(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseJsonObject() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c39;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c49;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c168();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c39;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseS();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseS();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseJsonMembers();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s4 = peg$c49;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c50); }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c169(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseJsonMembers() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseJsonPair();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c170;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c171); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseS();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseS();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseJsonPair();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c170;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c171); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseS();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseS();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseJsonPair();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c172(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseJsonPair() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseJsonString();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c173;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c174); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseS();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseS();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseJsonValue();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$parseS();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parseS();
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c175(s1, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseJsonArray() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c176;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c178;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c179); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c180();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c176;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c177); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseS();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseS();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseJsonElements();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s4 = peg$c178;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c179); }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c181(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }

      return s0;
    }

    function peg$parseJsonElements() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseJsonValue();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c170;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c171); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseS();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parseS();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseJsonValue();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c170;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c171); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseS();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseS();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseJsonValue();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseS();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseS();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c182(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseJsonValue() {
      var s0;

      s0 = peg$parseJsonLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseJsonObject();
        if (s0 === peg$FAILED) {
          s0 = peg$parseJsonArray();
        }
      }

      return s0;
    }

    function peg$parseJsonLiteral() {
      var s0;

      s0 = peg$parseJsonString();
      if (s0 === peg$FAILED) {
        s0 = peg$parseJsonNumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parseJsonTrue();
          if (s0 === peg$FAILED) {
            s0 = peg$parseJsonFalse();
            if (s0 === peg$FAILED) {
              s0 = peg$parseJsonNull();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseJsonTrue() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c184) {
        s1 = peg$c184;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c185); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c150();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }

      return s0;
    }

    function peg$parseJsonFalse() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c187) {
        s1 = peg$c187;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c188); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c189();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c186); }
      }

      return s0;
    }

    function peg$parseJsonNull() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c191) {
        s1 = peg$c191;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c192); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c130();
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c190); }
      }

      return s0;
    }

    function peg$parseJsonString() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c161;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c162); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c161;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c162); }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c194();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c161;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c162); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseJsonChars();
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s3 = peg$c161;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c162); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c195(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c193); }
      }

      return s0;
    }

    function peg$parseJsonChars() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseJsonChar();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseJsonChar();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c196(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseJsonChar() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      if (peg$c197.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c198); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c163) {
          s1 = peg$c163;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c164); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c165();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c199) {
            s1 = peg$c199;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c200); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c201();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c202) {
              s1 = peg$c202;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c203); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c204();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c205) {
                s1 = peg$c205;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c206); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c207();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c208) {
                  s1 = peg$c208;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c209); }
                }
                if (s1 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c210();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c211) {
                    s1 = peg$c211;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c212); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c213();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c214) {
                      s1 = peg$c214;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c215); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c216();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c217) {
                        s1 = peg$c217;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c218); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c219();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c220) {
                          s1 = peg$c220;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c221); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$currPos;
                          s4 = peg$parseHexDigit();
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseHexDigit();
                            if (s5 !== peg$FAILED) {
                              s6 = peg$parseHexDigit();
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parseHexDigit();
                                if (s7 !== peg$FAILED) {
                                  s4 = [s4, s5, s6, s7];
                                  s3 = s4;
                                } else {
                                  peg$currPos = s3;
                                  s3 = peg$c0;
                                }
                              } else {
                                peg$currPos = s3;
                                s3 = peg$c0;
                              }
                            } else {
                              peg$currPos = s3;
                              s3 = peg$c0;
                            }
                          } else {
                            peg$currPos = s3;
                            s3 = peg$c0;
                          }
                          if (s3 !== peg$FAILED) {
                            s3 = input.substring(s2, peg$currPos);
                          }
                          s2 = s3;
                          if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c222(s2);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseJsonNumber() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseJsonInteger();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseJsonFraction();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseJsonExponent();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      if (s2 !== peg$FAILED) {
        s2 = input.substring(s1, peg$currPos);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c224(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$currPos;
        s3 = peg$parseJsonInteger();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseJsonFraction();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s2 = input.substring(s1, peg$currPos);
        }
        s1 = s2;
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c224(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$currPos;
          s3 = peg$parseJsonInteger();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseJsonExponent();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s2 = input.substring(s1, peg$currPos);
          }
          s1 = s2;
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c224(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseJsonInteger();
            if (s2 !== peg$FAILED) {
              s2 = input.substring(s1, peg$currPos);
            }
            s1 = s2;
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c224(s1);
            }
            s0 = s1;
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c223); }
      }

      return s0;
    }

    function peg$parseJsonInteger() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDigit19();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDigits();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseDigit();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c14;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseDigit19();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseDigits();
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c14;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseDigit();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseJsonFraction() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c225;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c226); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDigits();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseJsonExponent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDigits();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDigits() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseDigit();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseDigit();
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDigit() {
      var s0;

      if (peg$c227.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c228); }
      }

      return s0;
    }

    function peg$parseDigit19() {
      var s0;

      if (peg$c229.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c230); }
      }

      return s0;
    }

    function peg$parseHexDigit() {
      var s0;

      if (peg$c231.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c232); }
      }

      return s0;
    }

    function peg$parseE() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (peg$c233.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c234); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$c235.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c236); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c2;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAny() {
      var s0;

      s0 = peg$parseAnyNonElement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseElement();
      }

      return s0;
    }

    function peg$parseAnyNonElement() {
      var s0;

      s0 = peg$parseProperty();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIf();
        if (s0 === peg$FAILED) {
          s0 = peg$parseFor();
          if (s0 === peg$FAILED) {
            s0 = peg$parseWhen();
            if (s0 === peg$FAILED) {
              s0 = peg$parseInvalidAlias();
              if (s0 === peg$FAILED) {
                s0 = peg$parseWidget();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseAliasedWidget();
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseS() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c238.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c239); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c237); }
      }

      return s0;
    }


    	var concat = Array.prototype.concat;
    	var hasOwnProperty = Object.prototype.hasOwnProperty;
    	var getKeys = function (object) {
    		var keys = [];
    		for (var key in object) {
    			keys.push(key);
    		}
    		return keys;
    	};
    	var toAbsMid = require.toAbsMid || function (mid) {
    		// From Dojo 2 core
    		function compactPath(path) {
    			var result = [];
    			var segment;
    			var lastSegment;
    			var splitPath = path.replace(/\\/g, '/').split('/');

    			while (splitPath.length) {
    				segment = splitPath.shift();
    				if (segment === '..' && result.length && lastSegment !== '..') {
    					result.pop();
    					lastSegment = result[result.length - 1];
    				}
    				else if (segment !== '.') {
    					result.push((lastSegment = segment));
    				} // else ignore "."
    			}

    			return result.join('/');
    		}

    		if (mid.charAt(0) !== '.') {
    			return mid;
    		}

    		return compactPath(module.id.replace(/[^\/]*\.js$/, '') + mid);
    	};

    	/**
    	 * Validates that the attributes provided in the given attribute map are correct according to the provided rules.
    	 */
    	function validate(attributes, rules) {
    		var required = rules.required || [];
    		var optional = rules.optional || [];
    		var oneOf = rules.oneOf || [];
    		var type = rules.type ? ' on ' + rules.type : '';

    		var i = 0;
    		var j = 0;
    		var permitted = {};

    		for (i = 0, j = required.length; i < j; ++i) {
    			if (!hasOwnProperty.call(attributes, required[i])) {
    				throwError('Missing required attribute "' + required[i] + '"' + type);
    			}
    			permitted[required[i]] = true;
    		}

    		var hasOneOf = false;
    		for (i = 0, j = oneOf.length; i < j; ++i) {
    			if (hasOwnProperty.call(attributes, oneOf[i])) {
    				hasOneOf = true;
    				permitted[oneOf[i]] = true;
    				break;
    			}
    		}
    		if (oneOf.length && !hasOneOf) {
    			throwError('Missing one of the following attributes' + type + ': "' + oneOf.join('", "') + '"');
    		}

    		for (i = 0, j = optional.length; i < j; ++i) {
    			permitted[optional[i]] = true;
    		}

    		if (!rules.extensible) {
    			for (var name in attributes) {
    				if (!hasOwnProperty.call(permitted, name)) {
    					throwError('Invalid attribute "' + name + '"' + type);
    				}
    			}
    		}
    	}

    	/**
    	 * Parses `text` for data binding signatures.
    	 *
    	 * @param {string} text Text possibly containing data binding signatures.
    	 * @returns {{ $bind: string[] }|string} A binding instruction object if data binding paths exist in the text, or
    	 * just the text if there were no data binding signatures.
    	 */
    	function parseBoundText(text) {
    		var results = parse(text, { startRule: 'BoundText' });

    		for (var i = 0, j = results.length; i < j; ++i) {
    			if (results[i].$bind) {
    				if (results.length === 1) {
    					return results[i];
    				}

    				return { $bind: results, direction: 1 };
    			}
    		}

    		return results.join('');
    	}

    	/**
    	 * Generate an error with line and column numbers in the message.
    	 *
    	 * @param {string} message The text to display after the line and column number.
    	 * @param {number} lineNumber The line number to display. If not provided, the current PEG parser position will be
    	 * used.
    	 * @param {number} columnNumber The column number to display. If not provided, the current PEG parser position will
    	 * be used.
    	 */
    	function throwError(message, lineNumber, columnNumber) {
    		if (lineNumber === undefined) {
    			lineNumber = line();
    		}
    		if (columnNumber === undefined) {
    			columnNumber = column();
    		}
    		error('Line ' + lineNumber + ', column ' + columnNumber + ': ' + message);
    	}

    	var tree = {
    		_constructors: {},
    		tagMap: {},
    		eventMap: {},

    		/**
    		 * Adds a new tag to the tags understood by this template.
    		 *
    		 * @param newAlias {Object}
    		 * An object with the following keys:
    		 *   * `tag` (string): The tag name to alias.
    		 *   * `to` (string): The replacement constructor to use.
    		 *   * `line` (number): The one-indexed line number where the alias was defined in the template.
    		 *   * `column` (number): The one-indexed column number where the alias was defined in the template.
    		 */
    		addTag: function (newAlias) {
    			var map = this.tagMap;

    			// Tags are case-insensitive
    			var tag = newAlias.tag.toLowerCase();
    			var oldAlias = map[tag];

    			if (oldAlias) {
    				// The same alias has already been parsed once before, probably by some look-ahead; do not add it
    				// again
    				if (oldAlias.line === newAlias.line && oldAlias.column === newAlias.column) {
    					return;
    				}

    				throwError('Alias "' + newAlias.tag + '" was already defined at line ' + oldAlias.line +
    					', column ' + oldAlias.column,
    					newAlias.line, newAlias.column);
    			}
    			else {
    				map[tag] = newAlias;
    			}
    		},

    		addEvent: function (newEvent) {
    			var map = this.eventMap;

    			// Convert foo-bar-baz to onFooBarBaz
    			// TODO: is this the correct event name to reference it by?
    			var event = ('on-' + newEvent.event).replace(/-(.)/g, function () {
    				return arguments[1].toUpperCase();
    			});
    			var oldEvent = map[event];

    			if (oldEvent) {
    				// The same event has already been parsed once before, probably by some look-ahead; do not add it
    				// again
    				if (oldEvent.line === newEvent.line && oldEvent.column === newEvent.column) {
    					return;
    				}

    				throwError('Event "' + newEvent.event + '" was already defined at line ' + oldEvent.line +
    					', column ' + oldEvent.column,
    					newEvent.line, newEvent.column);
    			}
    			else {
    				map[event] = newEvent;
    			}
    		},

    		/**
    		 * Retrieves the root tree structure for the given node.
    		 *
    		 * @returns {Object} The validated syntax tree for the given root node.
    		 */
    		get: function (root) {
    			// TODO: Add event modules to constructors array
    			this._collectConstructors(root);

    			// TODO: Return the event mapping
    			return {
    				constructors: getKeys(this._constructors),
    				root: root
    			};
    		},

    		/**
    		 * Walks the widget tree, collecting constructor module IDs for the given node and its children.
    		 */
    		_collectConstructors: function (node) {
    			if (node && hasOwnProperty.call(node, 'constructor')) {
    				this._constructors[node.constructor] = true;
    			}

    			for (var key in node) {
    				var value = node[key];
    				if (value instanceof Array) {
    					for (var i = 0, child; (child = value[i]); ++i) {
    						this._collectConstructors(child);
    					}
    				}
    				else if (typeof value === 'object' || typeof value === 'function') {
    					this._collectConstructors(value);
    				}
    			}
    		}
    	};


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
});